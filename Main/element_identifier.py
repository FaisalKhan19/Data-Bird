from common import By, pd, json, yaml

"""
This type of element identification is done by a 'scrape_dict' dictionary that will be generated by the automation
frontend. It will contain the tyoe of element to be scraped and it's class name. It can automatically identify it's
parent or child elements to capture similar elements.
Example of scrape_dict: 
dict = {
    'image':'_4rR01T',
    'text' :'_3LWZlK',
    'list' :'rgWa7D',
    'cards':{
        'card'  : '23jnjn34',
        'type1' : '12kjnnk21',
        'type2' : '23kjne22jn3',
        'type3' : '43jnkjn434'
    }
}
"""

def identify(driver, class_name, type='text', scrape_dict = {}):

    items = driver.find_elements(By.CLASS_NAME,class_name)

    if iter(items):
        try:
            parent_element = items[0].find_element(By.XPATH,'..')
            if(parent_element.get_attribute('tag_name')=='ul'):
                scrape_dict.update('list',parent_element.get_attribute('class'))
        except:
            child_name = items[0].get_attribute('innerHTML').split(' ')[0].split('<')[1]
            parent_element = items[0].find_elements(By.XPATH,'..')
            child_element = items[0].find_element(By.TAG_NAME,child_name)
            if(iter(parent_element)):
                scrape_dict.update(type,parent_element[0].get_attribute('class'))
            elif(iter(child_element)):
                scrape_dict.update(type,child_element[0].get_attribute('class'))
    else:
        scrape_dict.append(type,parent_element.get_attribute('class'))

    return scrape_dict
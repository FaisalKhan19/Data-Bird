from common import By

"""
This type of element identification is done by a 'scrape_dict' dictionary that will be generated by the automation
frontend. It will contain the type of element to be scraped and it's class name. It can automatically identify it's
parent or child elements to capture similar elements.
Example of scrape_dict: 
dict = {
    'image':'_4rR01T',
    'text' :'_3LWZlK',
    'list' :'rgWa7D',
    'cards':{
        'card'  : '23jnjn34',
        'type1' : '12kjnnk21',
        'type2' : '23kjne22jn3',
        'type3' : '43jnkjn434'
    }
}

Example Usage:
scrape_dict = {}
identify(driver, 'rgWa7D', 'card', scrape_dict,False)
identify(driver, '_2kHMtA', 'list', scrape_dict,False)
identify(driver, '_4rR01T', 'text', scrape_dict,True)
scrape_dict = cards(driver, '_2kHMtA', 'card', scrape_dict)
scrape_dict

Output:
{'card': {'card': '_2kHMtA', 'list': '_1xgFaf', 'text': '_4rR01T'}}

"""

def identify(driver, XPATH, type='text', scrape_dict = {}, specific = True):
    
    if(specific):
        scrape_dict[type] = XPATH

    items = driver.find_elements(By.CLASS_NAME,XPATH)
    if iter(items):
        if(type=='card'):
            scrape_dict[type] = XPATH
        parent_element = items[0].find_element(By.XPATH,'..')
        try:
            if(parent_element.tag_name=='ul'):
                scrape_dict['list'] = parent_element.get_attribute('class')
        except:
            child_name = items[0].get_attribute('innerHTML').split(' ')[0].split('<')[1]
            child_element = items[0].find_elements(By.TAG_NAME,child_name)
            if(iter(parent_element)):
                scrape_dict[type] = parent_element[0].get_attribute('class')
            elif(iter(child_element)):
                scrape_dict[type] = child_element[0].get_attribute('class')
    else:
        scrape_dict[type] = parent_element.get_attribute('class')

    return scrape_dict

def cards(driver, XPATH, type='text', scrape_dict = {},card_dict = {}):
    dict = identify(driver, XPATH, type, scrape_dict)
    card_dict['card'] = dict
    return card_dict